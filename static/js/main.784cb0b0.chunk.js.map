{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","sortedGoods","goods","sortedGoodsCopy","Alphabet","sort","good1","good2","localeCompare","Length","length","reverse","getSortedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBYA,E,0EAbCC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGUD,K,eAAAA,E,gBAAAA,E,YAAAA,M,KAgCL,IAAME,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA7BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAe,YAAOD,GAkB5B,OAhBIL,IAAcL,EAASY,UACzBD,EAAgBE,MAAK,SAACC,EAAOC,GAC3B,OAAOD,EAAME,cAAcD,MAI3BV,IAAcL,EAASiB,QACzBN,EAAgBE,MAAK,SAACC,EAAOC,GAC3B,OAAOD,EAAMI,OAASH,EAAMG,UAI5BX,GACFI,EAAgBQ,UAGXR,EAMaS,CAAenB,EAAiBI,EAAWE,GAE/D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYlB,IAAcL,EAASY,WAEvCY,QAAS,WACPlB,EAAaN,EAASY,WAR1B,iCAcA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYlB,IAAcL,EAASiB,SAEvCO,QAAS,WACPlB,EAAaN,EAASiB,SAR1B,4BAcA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAahB,IAEjBiB,QAAS,WACPhB,GAAeD,IARnB,sBAcEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAaN,EAASI,SACtBI,GAAc,IALlB,sBAaJ,6BACGC,EAAYgB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YClHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.784cb0b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortType {\n  Alphabet = 'abc',\n  Length = 'length',\n  Default = '',\n}\n\nfunction getSortedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: boolean,\n): string[] {\n  const sortedGoodsCopy = [...goods];\n\n  if (sortField === SortType.Alphabet) {\n    sortedGoodsCopy.sort((good1, good2) => {\n      return good1.localeCompare(good2);\n    });\n  }\n\n  if (sortField === SortType.Length) {\n    sortedGoodsCopy.sort((good1, good2) => {\n      return good1.length - good2.length;\n    });\n  }\n\n  if (isReversed) {\n    sortedGoodsCopy.reverse();\n  }\n\n  return sortedGoodsCopy;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.Default);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortedGoods = getSortedGoods(goodsFromServer, sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortType.Alphabet },\n          )}\n          onClick={() => {\n            setSortField(SortType.Alphabet);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortType.Length },\n          )}\n          onClick={() => {\n            setSortField(SortType.Length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => {\n            setIsReversed(!isReversed);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.Default);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}